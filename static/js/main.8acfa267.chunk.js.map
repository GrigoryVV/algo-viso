{"version":3,"sources":["components/Header/Header.module.css","components/ControlPanel/Choice/Choice.module.css","components/SortAlgo/SortAlgo.module.css","components/SortAlgo/PolesField/PolesField.module.css","components/SortAlgo/PolesField/Pole/Pole.module.css","components/ControlPanel/ControlPanel.module.css","components/Header/Header.jsx","redux/headerReducer.js","components/Header/HeaderContainer.jsx","components/SortAlgo/PolesField/Pole/Pole.jsx","components/SortAlgo/PolesField/PolesField.jsx","components/SortAlgo/PolesField/PolesFieldContainer.jsx","components/SortAlgo/SortAlgo.jsx","components/ControlPanel/Choice/Choice.jsx","components/ControlPanel/ControlPanel.jsx","redux/controlPanelReducer.js","Algorithms/bubbleSort.js","Algorithms/choiceSort.js","Algorithms/insertSort.js","Algorithms/mergeSort.js","Algorithms/quickSort.js","redux/sortAlgoReducer.js","components/ControlPanel/ControlPanelContainer.jsx","App.js","serviceWorker.js","redux/pathAlgoReducer.js","redux/reduxStore.js","index.js"],"names":["module","exports","Header","props","className","css","wrap","nav_wrap","to","nav_link","activeClassName","active","onClick","selectSorting","selectPathFind","initialState","sortingPage","headerReducer","state","action","type","HeaderContainer","connect","header","dispatch","Pole","color","undefined","pole","style","height","value","PolesField","polesElements","poles","map","index","redId","key","greenId","blueId","field","PolesFieldContainer","sortAlgo","SortAlgo","Choice","listData","data","name","selectedAlgo","id","selectSortType","algo_choice","ControlPanel","switchMenu","mixPoles","visualizeSort","switchControls","timerID","setInterval","isSorted","clearInterval","console","log","stopSort","classForMenu","this","menuIsOpen","controlsSwitchClass","busy","menu","btn","hover_btn","sorting","controls_off","pathFinding","React","Component","controlPanelReducer","sortName","bubbleSort","changedState","len","length","firstIter","secondIter","isStart","firstIterLimit","secondIterLimit","temp","choiseSort","insertSort","stepsList","merge","array","lStart","rStart","lDelta","i","k","limit","slice","concat","push","from","did","mergeSortManager","mergeSort","start","middle","Math","floor","leftArray","leftStart","rightArray","rightStart","arrayToMerge","sortedArray","thirdIter","quickSortManager","quickSort","pivot","storedIndex","sortAlgoReducer","j","random","ControlPanelContainer","controlPanel","selectSortTypeAC","visualizeSortAC","App","path","Boolean","window","location","hostname","match","nodes","h","fieldWidth","v","fieldHeight","horizontIndex","verticalIndex","weight","finish","comments","newCommentText","mainReducer","commentText","text","reducers","combineReducers","main","store","createStore","renderEntireTree","ReactDOM","render","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8acfa267.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Header_wrap__3EzeX\",\"nav_wrap\":\"Header_nav_wrap__26FrY\",\"nav_link\":\"Header_nav_link__2qpye\",\"active\":\"Header_active__2ClPy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"algo_choice\":\"Choice_algo_choice__2p12u\",\"active\":\"Choice_active__3C77E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"SortAlgo_wrap__30hvE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"PolesField_field__2Wh8k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pole\":\"Pole_pole__MXWR7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ControlPanel_wrap__2n-Bx\",\"menu\":\"ControlPanel_menu__1jaFu\",\"btn\":\"ControlPanel_btn__w8LJn\",\"hover_btn\":\"ControlPanel_hover_btn__2NOBH\",\"hide\":\"ControlPanel_hide__noJu1\",\"controls_off\":\"ControlPanel_controls_off__2KfYo\"};","import React from 'react';\r\nimport css from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction Header(props) {\r\n\r\n  function selectSorting() {\r\n    props.selectSorting();\r\n  } \r\n  function selectPathFind() {\r\n    props.selectPathFind();\r\n  } \r\n\r\n  return (\r\n    <header className={css.wrap}>\r\n      <h1>Визуализатор алгоритмов</h1>\r\n      <nav className={css.nav_wrap}>\r\n        <NavLink to=\"/algo-viso/sorting\" className={css.nav_link} activeClassName={css.active} onClick={selectSorting} >Cортировка</NavLink>\r\n        <NavLink to=\"/algo-viso/pathfinding\" className={css.nav_link} activeClassName={css.active} onClick={selectPathFind} >Поиск пути</NavLink>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","const SORTING_IS_SELECTED = 'SORTING_IS_SELECTED'\r\nconst PATHFIND_IS_SELECTED = 'PATHFIND_IS_SELECTED'\r\n\r\nlet initialState = {\r\n    sortingPage: true\r\n};\r\n\r\nfunction headerReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SORTING_IS_SELECTED:\r\n            return {\r\n                ...state,\r\n                sortingPage: true\r\n            };\r\n        case PATHFIND_IS_SELECTED:\r\n            return {\r\n                ...state,\r\n                sortingPage: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectSortingAC = () => {\r\n    return {\r\n      type: SORTING_IS_SELECTED\r\n    }\r\n}\r\nexport const selectPathFindAC = () => {\r\n    return {\r\n      type: PATHFIND_IS_SELECTED\r\n    }\r\n}\r\n\r\nexport default headerReducer;","import { connect } from 'react-redux';\r\nimport Header from './Header';\r\nimport { selectSortingAC, selectPathFindAC } from '../../redux/headerReducer';\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        sortingPage: state.header.sortingPage\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        selectSorting: () => {\r\n            dispatch(selectSortingAC())\r\n        },\r\n        selectPathFind: () => {\r\n            dispatch(selectPathFindAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst HeaderContainer = connect(mapStateToProps, mapDispatchToProps)(Header);\r\n\r\nexport default HeaderContainer;","import React from 'react';\r\nimport css from './Pole.module.css'\r\n\r\nfunction Pole(props) {\r\n  let color = props.color !== undefined ? props.color : '';\r\n\r\n  return (\r\n    <div className={`${color} ${css.pole}`} style={{height: props.value + 'px'}}>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pole;","import React from 'react';\r\nimport css from './PolesField.module.css'\r\nimport Pole from './Pole/Pole';\r\n\r\n\r\nfunction PolesField(props) {\r\n\r\n  let polesElements = props.poles.map(pole => {\r\n    if (pole.index === props.redId) {\r\n      return <Pole key={pole.index} color='red' value={pole.value} />\r\n    } else if (pole.index === props.greenId) {\r\n      return <Pole key={pole.index} color='green' value={pole.value} />\r\n    } else if (pole.index === props.blueId) {\r\n      return <Pole key={pole.index} color='blue' value={pole.value} />\r\n    } else {\r\n      return <Pole key={pole.index} value={pole.value} />\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n      <div className={css.field}>\r\n        {polesElements}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default PolesField;","import PolesField from './PolesField'\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps= (state) => {\r\n  return {\r\n    poles: state.sortAlgo.poles,\r\n    redId: state.sortAlgo.redId,\r\n    greenId: state.sortAlgo.greenId,\r\n    blueId: state.sortAlgo.blueId\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n  };\r\n}\r\n\r\nconst PolesFieldContainer = connect(mapStateToProps, mapDispatchToProps)(PolesField)\r\n\r\nexport default PolesFieldContainer;","import React from 'react';\r\nimport css from './SortAlgo.module.css';\r\nimport PolesFieldContainer from './PolesField/PolesFieldContainer';\r\n\r\n\r\nfunction SortAlgo(props) {\r\n  return (\r\n    <div className={css.wrap}>\r\n      <PolesFieldContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortAlgo;","import React from 'react';\r\nimport css from './Choice.module.css'\r\n\r\nfunction Choice(props) {\r\n\r\n    let listData = props.listData.map(data => {\r\n        if (data.name === props.selectedAlgo) {\r\n            return <li \r\n                key={data.id} \r\n                onClick={() => props.selectSortType(data.name)}\r\n                className={css.active}\r\n                >{data.name}</li>;\r\n        } else {\r\n            return <li key={data.id} onClick={() => {\r\n                props.selectSortType(data.name);\r\n            }} >{data.name}</li>;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <ul className={`${props.className} ${css.algo_choice}`}>\r\n            {listData}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Choice;","import React from 'react';\r\nimport css from './ControlPanel.module.css'\r\nimport Choice from './Choice/Choice';\r\n\r\n\r\nclass ControlPanel extends React.Component {\r\n\r\n    switchMenu = () => {\r\n        this.props.switchMenu();\r\n    }\r\n\r\n    mixPoles = () => {\r\n        this.props.mixPoles();\r\n    }\r\n    \r\n    visualizeSort = () => {\r\n        this.props.switchControls();\r\n        let timerID = setInterval(() => {\r\n            if (this.props.isSorted) {\r\n                clearInterval(timerID);\r\n                this.props.switchControls();\r\n            }\r\n            console.log(this.props.isSorted);\r\n            this.props.visualizeSort(this.props.selectedAlgo)\r\n        }, 10)\r\n    }\r\n\r\n    stopSort = () => {\r\n        this.props.stopSort();\r\n    }\r\n\r\n    render() {\r\n        let classForMenu = !this.props.menuIsOpen ? 'hide' : '';\r\n\r\n        let controlsSwitchClass = this.props.busy ? '' : 'hide';\r\n\r\n        if (this.props.sortingPage) {\r\n            return (\r\n                <div className={css.wrap}>\r\n                    <ul className={css.menu}>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn} onClick={this.switchMenu}>\r\n                                Тип Алгоритма\r\n                            </span>\r\n                            <Choice \r\n                                listData={this.props.sorting} \r\n                                className={classForMenu}\r\n                                selectedAlgo={this.props.selectedAlgo}\r\n                                selectSortType={this.props.selectSortType}\r\n                            />\r\n                        </li>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn} onClick={this.mixPoles}>Перемешать</span>\r\n                        </li>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn} onClick={this.visualizeSort}>Сортировать</span>\r\n                        </li>\r\n                    </ul>\r\n                    <div onClick={this.stopSort} className={`${controlsSwitchClass} ${css.controls_off}`}></div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className={css.wrap}>\r\n                    <ul className={css.menu}>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn} onClick={this.switchMenu}>Тип Алгоритма</span>\r\n                            <Choice listData={this.props.pathFinding} className={classForMenu}/>\r\n                        </li>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn}>Очистить путь</span>\r\n                        </li>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn}>Очистить доску</span>\r\n                        </li>\r\n                        <li className={css.btn}>\r\n                            <span className={css.hover_btn}>Визуализировать</span>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`${controlsSwitchClass} ${css.controls_off}`}></div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","const SWITCH_MENU = 'SWITCH_MENU';\r\nconst SELECT_SORT_TYPE = 'SELECT_SORT_TYPE';\r\nconst SWITCH_CONTROLS = 'SWITCH_CONTROLS';\r\n\r\nlet initialState = {\r\n    sorting: [\r\n        {\r\n            id: 0,\r\n            name: \"Bubble Sort\" \r\n        },\r\n        {\r\n            id: 1,\r\n            name: \"Quick Sort\" \r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Choise Sort\" \r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Insert Sort\" \r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Merge Sort\" \r\n        }\r\n    ],\r\n    pathFinding: [\r\n        {\r\n            id: 0,\r\n            name: \"Dijkstra's Algorithm\" \r\n        },\r\n        {\r\n            id: 1,\r\n            name: \"A* Search\" \r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Greedy Best-first Search\" \r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Swarm Algorithm\" \r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Convergent Swarm Algorithm\" \r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Bidirectional Swarm Algorithm\" \r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Breadth-first Search\" \r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"Depth-first Search\" \r\n        }\r\n    ],\r\n    selectedAlgo: '',\r\n    menuIsOpen: false,\r\n    busy: false\r\n};\r\n\r\nfunction controlPanelReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case SWITCH_MENU:\r\n            return state.menuIsOpen ? {\r\n                ...state,\r\n                menuIsOpen: false\r\n            } : {\r\n                ...state,\r\n                menuIsOpen: true\r\n            };\r\n        case SELECT_SORT_TYPE:\r\n            return {\r\n                ...state,\r\n                selectedAlgo: action.sortName\r\n            };\r\n        case SWITCH_CONTROLS:\r\n            return state.busy ? {\r\n                ...state,\r\n                busy: false\r\n            } : {\r\n                ...state,\r\n                busy: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const switchMenuAC = () => {\r\n    return {\r\n      type: SWITCH_MENU\r\n    };\r\n}\r\n\r\nexport const selectSortTypeAC = (sortName) => {\r\n    return {\r\n      type: SELECT_SORT_TYPE,\r\n      sortName: sortName\r\n    };\r\n}\r\n\r\nexport const switchControlsAC = () => {\r\n    return {\r\n      type: SWITCH_CONTROLS\r\n    };\r\n}\r\n\r\nexport default controlPanelReducer;","function bubbleSort(state) {\r\n    let len = state.poles.length;\r\n    let firstIter = 1;\r\n    let secondIter = 0;\r\n    let changedState;\r\n    if (state.isSorted) return state;\r\n    if (state.isStart) {\r\n        changedState = {\r\n            ...state,\r\n            poles: [...state.poles],\r\n            firstIter: firstIter,\r\n            secondIter: secondIter,\r\n            firstIterLimit: len,\r\n            secondIterLimit: len - firstIter,\r\n            isStart: false\r\n        };\r\n        changedState.redId = changedState.poles[secondIter].index;\r\n    } else {\r\n        secondIter = state.secondIter + 1;\r\n        if (secondIter >= state.secondIterLimit) {\r\n            secondIter = 0;\r\n            firstIter = state.firstIter + 1;\r\n            if (firstIter === len) return {\r\n                ...state,\r\n                firstIter: -1,\r\n                secondIter: -1,\r\n                isStart: true,\r\n                isSorted: true,\r\n                redId: -1,\r\n                greenId: -1\r\n            };\r\n        } else {\r\n            firstIter = state.firstIter\r\n        }\r\n        changedState = {\r\n            ...state,\r\n            poles: [...state.poles],\r\n            firstIter: firstIter,\r\n            secondIter: secondIter,\r\n            secondIterLimit: len - firstIter\r\n        };\r\n    }\r\n    \r\n    if (changedState.poles[secondIter].value > changedState.poles[secondIter + 1].value) {\r\n        let temp = changedState.poles[secondIter];\r\n        changedState.poles[secondIter] = changedState.poles[secondIter + 1];\r\n        changedState.poles[secondIter + 1] = temp;\r\n    } else {\r\n        changedState.redId = changedState.poles[secondIter + 1].index;\r\n    }\r\n\r\n    return changedState;\r\n}\r\n\r\nexport default bubbleSort;","function choiseSort(state) {\r\n    let len = state.poles.length;\r\n    let firstIter = 0;\r\n    let secondIter = firstIter + 1;\r\n    let changedState;\r\n    if (state.isSorted) return state;\r\n    if (state.isStart) {\r\n        changedState = {\r\n            ...state,\r\n            poles: [...state.poles],\r\n            firstIter: firstIter,\r\n            secondIter: secondIter,\r\n            firstIterLimit: len - 1,\r\n            secondIterLimit: len,\r\n            isStart: false\r\n        };\r\n        changedState.redId = changedState.poles[secondIter].index;\r\n        changedState.greenId = changedState.poles[firstIter].index;\r\n    } else {\r\n        secondIter = state.secondIter + 1;\r\n        if (secondIter >= state.secondIterLimit) {\r\n            firstIter = state.firstIter + 1;\r\n            secondIter = firstIter + 1;\r\n            if (firstIter === len - 1) return {\r\n                ...state,\r\n                firstIter: -1,\r\n                secondIter: -1,\r\n                isStart: true,\r\n                isSorted: true,\r\n                redId: -1,\r\n                greenId: -1\r\n            };\r\n        } else {\r\n            firstIter = state.firstIter\r\n        }\r\n        changedState = {\r\n            ...state,\r\n            poles: [...state.poles],\r\n            firstIter: firstIter,\r\n            secondIter: secondIter\r\n        };\r\n        changedState.redId = changedState.poles[secondIter].index;\r\n        changedState.greenId = changedState.poles[firstIter].index;\r\n    }\r\n\r\n    if (changedState.poles[secondIter].value < changedState.poles[firstIter].value) {\r\n        let temp = changedState.poles[secondIter];\r\n        changedState.poles[secondIter] = changedState.poles[firstIter];\r\n        changedState.poles[firstIter] = temp;\r\n    }\r\n    return changedState;\r\n}\r\n\r\nexport default choiseSort;","function insertSort(state) {\r\n    let len = state.poles.length;\r\n    let firstIter = 1;\r\n    let secondIter = 1;\r\n    let changedState;\r\n    if (state.isSorted) return state;\r\n    if (state.isStart) {\r\n        changedState = {\r\n            ...state,\r\n            poles: [...state.poles],\r\n            firstIter: firstIter,\r\n            secondIter: secondIter,\r\n            firstIterLimit: len,\r\n            secondIterLimit: 0,\r\n            isStart: false\r\n        };\r\n        changedState.redId = changedState.poles[secondIter].index;\r\n        changedState.greenId = changedState.poles[firstIter].index;\r\n    } else {\r\n        secondIter = state.secondIter - 1;\r\n        if (secondIter <= state.secondIterLimit) {\r\n            firstIter = state.firstIter + 1;\r\n            secondIter = firstIter;\r\n            if (firstIter === len) return {\r\n                ...state,\r\n                firstIter: -1,\r\n                secondIter: -1,\r\n                isStart: true,\r\n                isSorted: true,\r\n                redId: -1,\r\n                greenId: -1\r\n            };\r\n        } else {\r\n            firstIter = state.firstIter\r\n        }\r\n        changedState = {\r\n            ...state,\r\n            poles: [...state.poles],\r\n            firstIter: firstIter,\r\n            secondIter: secondIter\r\n        };\r\n        changedState.redId = changedState.poles[secondIter].index;\r\n        changedState.greenId = changedState.poles[firstIter].index;\r\n    }\r\n\r\n    if (changedState.poles[secondIter].value < changedState.poles[secondIter - 1].value) {\r\n        let temp = changedState.poles[secondIter];\r\n        changedState.poles[secondIter] = changedState.poles[secondIter - 1];\r\n        changedState.poles[secondIter - 1] = temp;\r\n    }\r\n    return changedState;\r\n}\r\n\r\nexport default insertSort;","let stepsList = [];\r\n\r\nfunction merge(array, lStart, rStart) {\r\n    \r\n    let lDelta = rStart - lStart;\r\n\r\n    let i = 0,\r\n        k = lDelta,\r\n        limit = lDelta;\r\n\r\n    while (i < limit && k < array.length) {\r\n        if (array[k].value < array[i].value) {\r\n            array = array.slice(0, i).concat(\r\n                array.slice(k, k+1),\r\n                array.slice(i, limit),\r\n                array.slice(k+1)\r\n            );\r\n            stepsList.push({\r\n                from: k + lStart,\r\n                to: i + lStart,\r\n                did: true\r\n            });\r\n            limit++;\r\n            i++;\r\n            k++;\r\n        } else {\r\n            stepsList.push({\r\n                from: i + lStart,\r\n                to: i + lStart,\r\n                did: false\r\n            });\r\n            i++;\r\n        }\r\n    }\r\n    while (i < limit) {\r\n        stepsList.push({\r\n            from: i + lStart,\r\n            to: i + lStart,\r\n            did: false\r\n        });\r\n        i++;\r\n    }\r\n    while (k < array.length) {\r\n        stepsList.push({\r\n            from: k + lStart,\r\n            to: k + lStart,\r\n            did: false\r\n        });\r\n        k++;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction mergeSort(array, start=0) {\r\n    if (array.length <= 1) {\r\n        return array;\r\n    }\r\n    let middle = Math.floor(array.length / 2);\r\n    let leftArray = [];\r\n    let leftStart = start;\r\n    \r\n    let rightArray = [];\r\n    let rightStart = start + middle;   \r\n   \r\n\r\n    for (let i = 0; i < middle; i++) {\r\n        leftArray.push(array[i]);\r\n    }\r\n    for (let i = middle; i < array.length; i++) {\r\n        rightArray.push(array[i]);\r\n    }\r\n\r\n    mergeSort(leftArray, leftStart);\r\n    mergeSort(rightArray, rightStart);\r\n\r\n    let arrayToMerge = leftArray.concat(rightArray);\r\n    let sortedArray = merge(arrayToMerge, leftStart, rightStart);\r\n    for (let i = 0; i < array.length; i++) {\r\n        array[i] = sortedArray[i];\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction mergeSortManager(state) {\r\n\r\n    let changedState;\r\n\r\n    if (state.isSorted) {\r\n        stepsList = [];\r\n        return state;\r\n    }\r\n\r\n    if (state.isStart) {\r\n        let arrayToSort = [...state.poles];\r\n        mergeSort(arrayToSort);\r\n        changedState = {\r\n            ...state,\r\n            poles:[...state.poles],\r\n            firstIter: 0,\r\n            isStart: false\r\n        };\r\n    } else {\r\n        changedState = {\r\n            ...state,\r\n            poles:[...state.poles],\r\n            firstIter: state.firstIter + 1\r\n        };\r\n        if (changedState.firstIter >= stepsList.length) {\r\n            stepsList = [];\r\n            return {\r\n                ...state,\r\n                firstIter: -1,\r\n                secondIter: -1,\r\n                thirdIter: -1,\r\n                redId: -1,\r\n                greenId: -1,\r\n                isSorted: true,\r\n                isStart: true\r\n            };\r\n        }\r\n    }\r\n\r\n    changedState.secondIter = stepsList[changedState.firstIter].from;\r\n    changedState.thirdIter = stepsList[changedState.firstIter].to;\r\n    changedState.redId = changedState.poles[changedState.thirdIter].index;\r\n    changedState.greenId = changedState.poles[changedState.secondIter].index;\r\n    \r\n    if (stepsList[changedState.firstIter].did) {\r\n        changedState.poles = changedState.poles.slice(\r\n            0, changedState.thirdIter\r\n        ).concat(\r\n            changedState.poles.slice(changedState.secondIter, changedState.secondIter+1),\r\n            changedState.poles.slice(changedState.thirdIter, changedState.secondIter),\r\n            changedState.poles.slice(changedState.secondIter+1)\r\n        );\r\n    }\r\n\r\n    return changedState;\r\n}\r\n\r\nexport default mergeSortManager;","let stepsList = [];\r\n\r\nfunction quickSort(array, from=0, to=array.length) {\r\n\r\n    if (to - from === 0) return;\r\n\r\n    let pivot = from;\r\n    let storedIndex = pivot + 1;\r\n\r\n    for (let i = pivot + 1; i < to; i++) {\r\n        if (array[i].value < array[pivot].value) {\r\n            let temp = array[i];\r\n            array[i] = array[storedIndex];\r\n            array[storedIndex] = temp;\r\n            stepsList.push({\r\n                from: i,\r\n                to: storedIndex,\r\n                pivot: pivot\r\n            });\r\n            storedIndex++;\r\n        }\r\n    }\r\n\r\n    let temp = array[pivot];\r\n    array[pivot] = array[storedIndex - 1];\r\n    array[storedIndex - 1] = temp;\r\n\r\n    stepsList.push({\r\n        from: pivot,\r\n        to: storedIndex - 1,\r\n        pivot: pivot\r\n    });\r\n\r\n    quickSort(array, from, storedIndex - 1);\r\n    quickSort(array, storedIndex, to);\r\n}\r\n\r\nfunction quickSortManager(state) {\r\n    let changedState;\r\n\r\n    if (state.isSorted) {\r\n        stepsList = [];\r\n        return state;\r\n    }\r\n\r\n    if (state.isStart) {\r\n        let arrayToSort = [...state.poles];\r\n        quickSort(arrayToSort);\r\n        changedState = {\r\n            ...state,\r\n            poles:[...state.poles],\r\n            firstIter: 0,\r\n            redId: -1,\r\n            greenId: -1,\r\n            blueId: -1,\r\n            isStart: false\r\n        };\r\n    } else {\r\n        changedState = {\r\n            ...state,\r\n            poles:[...state.poles],\r\n            firstIter: state.firstIter + 1\r\n        };\r\n        if (changedState.firstIter >= stepsList.length) {\r\n            stepsList = [];\r\n            return {\r\n                ...state,\r\n                firstIter: -1,\r\n                redId: -1,\r\n                greenId: -1,\r\n                blueId: -1,\r\n                isSorted: true,\r\n                isStart: true\r\n            };\r\n        }\r\n    }\r\n\r\n    let secondIter = stepsList[changedState.firstIter].from;\r\n    let thirdIter = stepsList[changedState.firstIter].to;\r\n    let pivot = stepsList[changedState.firstIter].pivot;\r\n    changedState.redId = changedState.poles[thirdIter].index;\r\n    changedState.greenId = changedState.poles[secondIter].index;\r\n    changedState.blueId = changedState.poles[pivot].index;\r\n\r\n    let temp = changedState.poles[thirdIter];\r\n    changedState.poles[thirdIter] = changedState.poles[secondIter];\r\n    changedState.poles[secondIter] = temp;\r\n\r\n    return changedState;\r\n}\r\n\r\nexport default quickSortManager;","import bubbleSort from \"../Algorithms/bubbleSort\";\r\nimport choiseSort from \"../Algorithms/choiceSort\";\r\nimport insertSort from \"../Algorithms/insertSort\";\r\nimport mergeSortManager from \"../Algorithms/mergeSort\";\r\nimport quickSortManager from \"../Algorithms/quickSort\";\r\n\r\nconst MIX_POLES = 'MIX_POLES'\r\nconst VISUALIZE_SORT = 'VISUALIZE_SORT';\r\nconst STOP_SORT = 'STOP_SORT';\r\n\r\nconst BUBBLE_SORT = 'Bubble Sort';\r\nconst CHOISE_SORT = 'Choise Sort';\r\nconst INSERT_SORT = 'Insert Sort';\r\nconst MERGE_SORT = 'Merge Sort';\r\nconst QUICK_SORT = 'Quick Sort';\r\n\r\nlet poles = [];\r\n\r\nfor (let i = 0; i < 100; i++) {\r\n    poles.push({\r\n        value: 5 * (i + 1),\r\n        index: i\r\n    });\r\n}\r\n\r\nlet initialState = {\r\n    poles: poles,\r\n    firstIter: -1,\r\n    secondIter: -1,\r\n    thirdIter: -1,\r\n    firstIterLimit: 10,\r\n    secondIterLimit: 0,\r\n    redId: -1,\r\n    greenId: -1,\r\n    blueId: -1,\r\n    isStart: true,\r\n    isSorted: true\r\n};\r\n\r\nfunction sortAlgoReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case MIX_POLES: {\r\n            let changedState = {...state, poles:[...state.poles], isSorted: false};\r\n            let temp, j;\r\n            for (let i = changedState.poles.length - 1; i > 0; i--) {\r\n                j = Math.floor(Math.random() * (i + 1));\r\n                temp = changedState.poles[j];\r\n                changedState.poles[j] = changedState.poles[i];\r\n                changedState.poles[i] = temp;\r\n            }\r\n            return changedState;\r\n        }\r\n        case VISUALIZE_SORT: {\r\n            switch(action.sortName) {\r\n                case BUBBLE_SORT:\r\n                    return bubbleSort(state);\r\n                case CHOISE_SORT:\r\n                    return choiseSort(state);\r\n                case INSERT_SORT:\r\n                    return insertSort(state);\r\n                case MERGE_SORT:\r\n                    return mergeSortManager(state);\r\n                case QUICK_SORT:\r\n                    return quickSortManager(state);\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n        case STOP_SORT: {\r\n            return {\r\n                ...state,\r\n                redId: -1,\r\n                greenId: -1,\r\n                isStart: true,\r\n                isSorted: true\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nexport const mixPolesAC = () => {\r\n    return {\r\n        type: MIX_POLES\r\n    }\r\n}\r\n\r\nexport const stopSortAC = () => {\r\n    return {\r\n        type: STOP_SORT\r\n    }\r\n}\r\n\r\nexport const visualizeSortAC = (sortName) => {\r\n    return {\r\n      type: VISUALIZE_SORT,\r\n      sortName: sortName\r\n    };\r\n}\r\n\r\nexport default sortAlgoReducer;","import { connect } from 'react-redux';\r\nimport ControlPanel from './ControlPanel';\r\nimport { switchMenuAC, selectSortTypeAC, switchControlsAC } from '../../redux/controlPanelReducer';\r\nimport { mixPolesAC, visualizeSortAC, stopSortAC } from '../../redux/sortAlgoReducer';\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        sorting: state.controlPanel.sorting,\r\n        pathFinding: state.controlPanel.pathFinding,\r\n        selectedAlgo: state.controlPanel.selectedAlgo,\r\n        busy: state.controlPanel.busy,\r\n        menuIsOpen: state.controlPanel.menuIsOpen,\r\n        sortingPage: state.header.sortingPage,\r\n        isSorted: state.sortAlgo.isSorted\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        switchMenu: () => {\r\n            dispatch(switchMenuAC());\r\n        },\r\n        selectSortType: (sortName) => {\r\n            dispatch(selectSortTypeAC(sortName));\r\n        },\r\n        mixPoles: () => {\r\n            dispatch(mixPolesAC());\r\n        },\r\n        visualizeSort: (sortName) => {\r\n            dispatch(visualizeSortAC(sortName));\r\n        },\r\n        stopSort: () => {\r\n            dispatch(stopSortAC());\r\n        },\r\n        switchControls: () => {\r\n            dispatch(switchControlsAC());\r\n        }\r\n    }\r\n}\r\n\r\nconst ControlPanelContainer = connect(mapStateToProps, mapDispatchToProps)(ControlPanel)\r\n\r\nexport default ControlPanelContainer;","import React from 'react';\nimport './App.css';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport SortAlgo from './components/SortAlgo/SortAlgo';\nimport ControlPanelContainer from './components/ControlPanel/ControlPanelContainer';\nimport { Route, Switch } from 'react-router-dom';\n\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <HeaderContainer/>\n      <ControlPanelContainer/>\n      <Switch>\n        <Route path=\"/algo-viso/sorting\">\n          <SortAlgo />\n        </Route>\n        <Route path=\"/algo-viso/pathfinding\">\n          <div className='notificationMSG'>\n            Under Construction\n          </div>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const UPD_NEW_COMMENT_TEXT = 'UPD-NEW-COMMENT-TEXT';\r\nconst ADD_COMMENT = 'ADD-COMMENT';\r\n\r\nlet nodes = [];\r\nlet fieldWidth = 1000;\r\nlet fieldHeight = 500;\r\n\r\nfor (let h = 0; h < fieldWidth / 20; h++) {\r\n    nodes.push([]);\r\n    for (let v = 0; v < fieldHeight / 20; v++) {\r\n      nodes[h].push({\r\n        id:`${h}_${v}`,\r\n        horizontIndex: h,\r\n        verticalIndex: v,\r\n        weight: 1,\r\n        start: false,\r\n        finish: false\r\n      });\r\n    }\r\n}\r\n\r\nlet initialState = {\r\n    comments: ['Привет Мир!', 'Я Люблю Пропсы'],\r\n    newCommentText: '',\r\n    nodes: nodes\r\n};\r\n\r\nfunction mainReducer(state = initialState, action) {\r\n\r\n    switch(action.type) {\r\n        case ADD_COMMENT:\r\n            let commentText = state.newCommentText;\r\n            return {\r\n                ...state,\r\n                newCommentText: '',\r\n                comments: [...state.comments, commentText]\r\n            };                       \r\n        case UPD_NEW_COMMENT_TEXT:\r\n            return {\r\n                ...state,\r\n                newCommentText: action.text\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addCommentActionCreator = () => {\r\n    return {\r\n      type: ADD_COMMENT\r\n    }\r\n}\r\nexport const updNewCommentTextActionCreator = (text) => {\r\n    return {\r\n      type: UPD_NEW_COMMENT_TEXT,\r\n      text: text\r\n    }\r\n}\r\n\r\nexport default mainReducer;","import {createStore, combineReducers} from 'redux';\r\nimport mainReducer from \"./pathAlgoReducer\";\r\nimport controlPanelReducer from \"./controlPanelReducer\";\r\nimport headerReducer from './headerReducer';\r\nimport sortAlgoReducer from './sortAlgoReducer';\r\n\r\nlet reducers = combineReducers({\r\n    header: headerReducer,\r\n    main: mainReducer,\r\n    controlPanel: controlPanelReducer,\r\n    sortAlgo: sortAlgoReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/reduxStore';\nimport {Provider} from 'react-redux';\n\n\n\n\nfunction renderEntireTree() {\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>, document.getElementById('root'));\n}\nrenderEntireTree();\n\nstore.subscribe(renderEntireTree);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}